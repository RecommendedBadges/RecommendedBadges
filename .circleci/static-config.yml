# Use the latest 2.1 version of CircleCI pipeline process engine.
version: 2.1

parameters:
  create-packages:
    type: boolean
    default: false
  remaining-scratch-orgs:
    type: integer
    default: 0
  remaining-packages-without-validation:
    type: integer
    default: 0
  remaining-packages:
    type: integer
    default: 0

jobs:
  build:
    # Specify the execution environment.
    docker:
      - image: cimg/node:lts
    environment:
    - DX_CLI_URL: https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
    - HUB_ALIAS: HubOrg
    - REQUIRED_SCRATCH_ORGS: 1
    - TEST_ORG_ALIAS: TestOrg
    - WAIT_TIME: 30
    steps:
      - checkout
      - run:
          name: Install GH CLI
          command: |
            type -p curl >/dev/null || sudo apt install curl -y
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
            && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
            && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
            && sudo apt update \
            && sudo apt install gh -y
            echo $GH_ACCESS_TOKEN | gh auth login --with-token
      - run:
          name: Create SFDX Folder
          command: |
            # Create sfdx directory
            mkdir ~/sfdx
            # Download Salesforce CLI
            wget -qO- ${DX_CLI_URL_CUSTOM-$DX_CLI_URL} | tar xJ -C ~/sfdx --strip-components 1
      - run:
          name: Install Salesforce CLI
          command: |
            export PATH=~/sfdx/bin:$PATH
            echo "export PATH=~/sfdx/bin:$PATH" >> $BASH_ENV
            sfdx
      - run:
          name: Decrypt Server Key
          command: |
            openssl enc -nosalt -aes-256-cbc -d -in assets/server.key.enc -out assets/server.key -base64 -K $DECRYPTION_KEY -iv $DECRYPTION_IV
      - run:
          name: Authorize Dev Hub
          command: |
            sfdx force:auth:jwt:grant --clientid $HUB_CONSUMER_KEY --jwtkeyfile assets/server.key --username $HUB_USER_NAME -d -a $HUB_ALIAS
      - when:
          condition:
            equal: [ true, << pipeline.parameters.create-packages >> ]
          steps:
            - run:
                name: Get Packages to Update
                command: |
                  mkdir /tmp/artifacts
                  touch /tmp/artifacts/packagesToUpdate.txt
                  npm run getPackagesToUpdate
            - store_artifacts:
                path: /tmp/artifacts
      - run:
          name: Create Scratch Org for Testing Packages
          command: |
            if [[  << pipeline.parameters.remaining-scratch-orgs >> -lt $REQUIRED_SCRATCH_ORGS ]]
            then
              exit 1
            else
              sfdx force:org:create -v $HUB_ALIAS -s -f config/project-scratch-def.json -a $TEST_ORG_ALIAS -w $WAIT_TIME -d 1
            fi
      - run: 
          name: Push Source to Scratch Org
          command: |
            packagesToInstall=()
            packagesToInstall+=$( (npm --silent run getDependenciesBeforeTesting) )
            for packageToInstall in ${packagesToInstall[@]};
                do $(sfdx force:package:install -p $packageToInstall -u $TEST_ORG_ALIAS -r -w $WAIT_TIME)
            done
            sfdx force:source:push -u $TEST_ORG_ALIAS
      - run:
          name: Run Tests in Scratch Org
          command: |
            mkdir -p /tmp/artifacts
            sfdx force:apex:test:run -l RunLocalTests -u $TEST_ORG_ALIAS -c -d /tmp/artifacts -r json -y -w $WAIT_TIME
      - store_artifacts:
          path: /tmp/artifacts
#       - run:
#           name: Create scratch org for installing packages
#           command: |
#             # Create scratch org
#             sfdx force:org:create -v HubOrg -s -f config/project-scratch-def.json -a installorg -w 10 -d 1
#       - run:
#           name: Install packages in scratch org
      - when:
          condition:
            equal: [ packaging, <<pipeline.git.branch>> ]
          steps:
            - run:
                name: Create Package Version(s)
                command: |
                  sortedPackagesToUpdate=$(node getSortedPackagesToUpdate.js)
                  #add something to update forceignore
                  if [[ -n $sortedPackagesToUpdate ]]
                  then
                      packageArray=()
                      packageArray+=($sortedPackagesToUpdate)
                      for package in "${packageArray[@]}"
                      do
                          sfdx force:package:version:create -p $package -x -w $WAIT_TIME
                          echo "Created new version for package" $package
                      done
                  fi


workflows:
  build:
    jobs:
      - build


# fail to fail


#      - run:
#           name: Create Package Version
#           command: |
#             #Create package version
#             PACKAGEVERSION="$(sfdx force:package:version:create --package $PACKAGENAME --installationkeybypass --wait 10 --json --targetdevhubusername HubOrg | jq '.result.SubscriberPackageVersionId' | tr -d '"')"
#             echo 'PackageVersionId - ' ${PACKAGEVERSION}
#             # Store PackageVersionId to be used in future step
#             echo $PACKAGEVERSION > /tmp/packageversion.txt
#             name: Create scratch org
#             command: |
#               sfdx force --help
              
#               # Create scratch org
#               sfdx force:org:create -s -f config/project-scratch-def.json -s -a circle_build_$CIRCLE_BUILD_NUM -w 10 -d 1
#               # Push source to scratch org

#               stop here
#               sfdx force:source:push -u circle_build_$CIRCLE_BUILD_NUM

# git diff HEAD --name-only

#         - PACKAGENAME: "0Ho0N000000CaT8SAK"
#     - TESTLEVEL: RunLocalTests
#       - run:
#           name: Run Apex Tests
#           command: |
#             #Run unit tests on scratch org
#             sfdx force:apex:test:run --targetusername circle_build_$CIRCLE_BUILD_NUM --wait 10 --resultformat tap --codecoverage --testlevel $TESTLEVEL
#       - run:
#           name: Delete Scratch Org
#           command: |
#             #Delete scratch org
#             sfdx force:org:delete --targetusername  circle_build_$CIRCLE_BUILD_NUM --noprompt
 
#       - run:
#           name: Create Scratch Org for Installing Package Version
#           command: |
#             #Create scratch org
#             sfdx force:org:create --targetdevhubusername HubOrg --setdefaultusername --definitionfile config/project-scratch-def.json --setalias installorg --wait 10 --durationdays 1
#             sfdx force:org:display --targetusername installorg
#       - run:
#           name: Install package in Scratch Org
#           command: |
#             #Get PackageVersionId
#             PackageVersionId=$(</tmp/packageversion.txt)
#             #Install package in scratch org
#             sfdx force:package:install --package $PackageVersionId --publishwait 10 --wait 10 --targetusername installorg
#       - run:
#           name: Run Unit Tests on Scratch Org
#           command: |
#             #Run unit tests on scratch org
#             sfdx force:apex:test:run --targetusername installorg --wait 10 --resultformat tap --codecoverage --testlevel $TESTLEVEL
#       - run:
#           name: Delete Scratch org
#           command: |
#             #Delete scratch org
#             sfdx force:org:delete --targetusername installorg --noprompt
#     # Add steps to the job
#     # See: https://circleci.com/docs/2.0/configuration-reference/#steps
