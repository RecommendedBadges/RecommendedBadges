# Use the latest 2.1 version of CircleCI pipeline process engine.
version: 2.1

jobs:
  build:
    # Specify the execution environment.
    docker:
      - image: cimg/node:lts
    environment:
    - DX_CLI_URL: https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
    - HUB_ALIAS: HubOrg
    - WAIT_TIME: 30
    steps:
      - checkout
      - run:
          name: Create SFDX Folder
          command: |
            # Create sfdx directory
            mkdir ~/sfdx
            # Download Salesforce CLI
            wget -qO- ${DX_CLI_URL_CUSTOM-$DX_CLI_URL} | tar xJ -C ~/sfdx --strip-components 1
      - run:
          name: Install CLI
          command: |
            # Install the CLI
            export PATH=~/sfdx/bin:$PATH
            echo "export PATH=~/sfdx/bin:$PATH" >> $BASH_ENV
            sfdx
      - run:
          name: Decrypt server key
          command: |
            # Decrypt server key
            openssl enc -nosalt -aes-256-cbc -d -in assets/server.key.enc -out assets/server.key -base64 -K $DECRYPTION_KEY -iv $DECRYPTION_IV
      - run:
          name: Authorize Dev Hub
          command: |
            sfdx force:auth:jwt:grant --clientid $HUB_CONSUMER_KEY --jwtkeyfile assets/server.key --username $HUB_USER_NAME -d -a $HUB_ALIAS
      - when:
          condition:
            equal: [ packaging, <<pipeline.git.branch>> ]
          steps:
            - run:
                name: Create Package Version(s)
                command: |
                  sortedPackagesToUpdate=$(node getSortedPackagesToUpdate.js)
                  #add something to update forceignore
                  if [[ -n $sortedPackagesToUpdate ]]
                  then
                      packageArray=()
                      packageArray+=($sortedPackagesToUpdate)
                      for package in "${packageArray[@]}"
                      do
                          sfdx force:package:version:create -p $package -x -w $WAIT_TIME
                          echo "Created new version for package" $package
                      done
                  fi
      - when:
          condition:
            equal: [ fflib-migration, <<pipeline.git.branch>> ]
          steps:
            - run:
                name: Check node install
                command: |
                  limitLiteral=$(node getLimits.js)
                  echo ${limitLiteral}
                  limitArray=()
                  limitArray+=($limitLiteral)
                  declare -A limits
                  limits[scratchOrgs]=${limitArray[0]}
                  limits[packageVersions]=${limitArray[1]}
                  echo ${limits[@]}
#       - run:
#           name: Create scratch org for installing packages
#           command: |
#             # Create scratch org
#             sfdx force:org:create -v HubOrg -s -f config/project-scratch-def.json -a installorg -w 10 -d 1
#       - run:
#           name: Install packages in scratch org

#      - run:
#           name: Create Package Version
#           command: |
#             #Create package version
#             PACKAGEVERSION="$(sfdx force:package:version:create --package $PACKAGENAME --installationkeybypass --wait 10 --json --targetdevhubusername HubOrg | jq '.result.SubscriberPackageVersionId' | tr -d '"')"
#             echo 'PackageVersionId - ' ${PACKAGEVERSION}
#             # Store PackageVersionId to be used in future step
#             echo $PACKAGEVERSION > /tmp/packageversion.txt
#             name: Create scratch org
#             command: |
#               sfdx force --help
              
#               # Create scratch org
#               sfdx force:org:create -s -f config/project-scratch-def.json -s -a circle_build_$CIRCLE_BUILD_NUM -w 10 -d 1
#               # Push source to scratch org

#               stop here
#               sfdx force:source:push -u circle_build_$CIRCLE_BUILD_NUM

# git diff HEAD --name-only

#         - PACKAGENAME: "0Ho0N000000CaT8SAK"
#     - TESTLEVEL: RunLocalTests
#       - run:
#           name: Run Apex Tests
#           command: |
#             #Run unit tests on scratch org
#             sfdx force:apex:test:run --targetusername circle_build_$CIRCLE_BUILD_NUM --wait 10 --resultformat tap --codecoverage --testlevel $TESTLEVEL
#       - run:
#           name: Delete Scratch Org
#           command: |
#             #Delete scratch org
#             sfdx force:org:delete --targetusername  circle_build_$CIRCLE_BUILD_NUM --noprompt
 
#       - run:
#           name: Create Scratch Org for Installing Package Version
#           command: |
#             #Create scratch org
#             sfdx force:org:create --targetdevhubusername HubOrg --setdefaultusername --definitionfile config/project-scratch-def.json --setalias installorg --wait 10 --durationdays 1
#             sfdx force:org:display --targetusername installorg
#       - run:
#           name: Install package in Scratch Org
#           command: |
#             #Get PackageVersionId
#             PackageVersionId=$(</tmp/packageversion.txt)
#             #Install package in scratch org
#             sfdx force:package:install --package $PackageVersionId --publishwait 10 --wait 10 --targetusername installorg
#       - run:
#           name: Run Unit Tests on Scratch Org
#           command: |
#             #Run unit tests on scratch org
#             sfdx force:apex:test:run --targetusername installorg --wait 10 --resultformat tap --codecoverage --testlevel $TESTLEVEL
#       - run:
#           name: Delete Scratch org
#           command: |
#             #Delete scratch org
#             sfdx force:org:delete --targetusername installorg --noprompt
#     # Add steps to the job
#     # See: https://circleci.com/docs/2.0/configuration-reference/#steps

# # Invoke jobs via workflows
# # See: https://circleci.com/docs/2.0/configuration-reference/#workflows
# workflows:
#   say-hello-workflow:
#     jobs:
#       - say-hello
