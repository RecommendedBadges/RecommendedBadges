# Use the latest 2.1 version of CircleCI pipeline process engine.
version: 2.1

parameters:
  create-packages:
    type: boolean
    default: false
  remaining-scratch-orgs:
    type: integer
    default: 0
  remaining-packages-without-validation:
    type: integer
    default: 0
  remaining-packages:
    type: integer
    default: 0

jobs:
  build:
    # Specify the execution environment.
    docker:
      - image: cimg/node:lts
    environment:
    - DX_CLI_URL: https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
    - HUB_ALIAS: HubOrg
    - REQUIRED_SCRATCH_ORGS: 1
    - SCRATCH_ORG_DEFINITION_FILE: config/org-shape-scratch-def.json
    - TEST_LEVEL: RunLocalTests
    - TEST_ORG_ALIAS: TestOrg
    - UNPACKAGED_DIRECTORY: unpackageable
    - WAIT_TIME: 30
    steps:
      - checkout
      - run:
          name: Install GH CLI
          command: |
            type -p curl >/dev/null || sudo apt install curl -y
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
            && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
            && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
            && sudo apt update \
            && sudo apt install gh -y
            echo $GH_ACCESS_TOKEN | gh auth login --with-token
      - run:
          name: Create SFDX Folder
          command: |
            # Create sfdx directory
            mkdir ~/sfdx
            # Download Salesforce CLI
            wget -qO- ${DX_CLI_URL_CUSTOM-$DX_CLI_URL} | tar xJ -C ~/sfdx --strip-components 1
      - run:
          name: Install Salesforce CLI
          command: |
            export PATH=~/sfdx/bin:$PATH
            echo "export PATH=~/sfdx/bin:$PATH" >> $BASH_ENV
            sf
      - run:
          name: Decrypt Server Key
          command: |
            openssl enc -nosalt -aes-256-cbc -d -in assets/server.key.enc -out assets/server.key -base64 -K $DECRYPTION_KEY -iv $DECRYPTION_IV
      - run:
          name: Authorize Dev Hub
          command: |
            sf org login jwt -i $HUB_CONSUMER_KEY -f assets/server.key -o $HUB_USER_NAME -d -a $HUB_ALIAS
      - when:
          condition:
            and:
              - equal: [ true, << pipeline.parameters.create-packages >> ]
              - $CIRCLE_PULL_REQUEST
          steps:
            - run:
                name: Get Packages to Update
                command: |
                  mkdir /tmp/artifacts
                  touch /tmp/artifacts/packagesToUpdate.txt
                  npm run getSortedPackagesToUpdate
            - store_artifacts:
                path: /tmp/artifacts
            - run:
                name: Create Package Versions Skipping Validation
                command: |
                  npm run --silent updateForceIgnore
                  packagesToUpdate=()
                  packagesToUpdate+=$( (npm run --silent getSortedPackagesToUpdate) )
                  echo $packagesToUpdate
                  for packageToUpdate in ${packagesToUpdate[@]};
                      do sf package version create -p $packageToUpdate -x -w $WAIT_TIME --skip-validation
                  done
      - run:
          name: Create Scratch Org for Running Tests
          command: |
            if [[  << pipeline.parameters.remaining-scratch-orgs >> -lt $REQUIRED_SCRATCH_ORGS ]]
            then
              exit 1
            else
              sf org create scratch -f $SCRATCH_ORG_DEFINITION_FILE -v $HUB_ALIAS -d -a $TEST_ORG_ALIAS --no-track-source -w $WAIT_TIME -y 1 --json
            fi
      - run: 
          name: Install External Dependencies in Scratch Org
          command: |
            packagesToInstall=()
            packagesToInstall+=$( (npm run --silent getDependenciesBeforeTesting) )
            echo $packagesToInstall
            for packageToInstall in ${packagesToInstall[@]};
                do sf package install --skip-handlers FeatureEnforcement -p $packageToInstall -o $TEST_ORG_ALIAS -r -w $WAIT_TIME
            done
      - when:
            condition:
              equal: [ false, << pipeline.parameters.create-packages >> ]
            steps:
              - run:
                  name: Push Source to Scratch Org
                  command: |
                    npm run --silent updateForceIgnore
                    sf project deploy start -o $TEST_ORG_ALIAS
      - when:
            condition:
              and:
                - equal: [ true, << pipeline.parameters.create-packages >> ]
                - $CIRCLE_PULL_REQUEST
            steps:
              - run:
                  name: Install Packages in Scratch Org
                  command: |
                    packagesToInstall=()
                    packagesToInstall+=$( (npm run --silent getSortedPackagesToInstall) )
                    for packageToInstall in ${packagesToInstall[@]};
                      do sf package install --skip-handlers FeatureEnforcement -p $packageToInstall -o $TEST_ORG_ALIAS -r -w $WAIT_TIME
                    done
      - run:
          name: Run Tests in Scratch Org
          command: |
            mkdir -p /tmp/artifacts
            sf apex run test -l $TEST_LEVEL -o $TEST_ORG_ALIAS -c -d /tmp/artifacts -r json -w $WAIT_TIME
      - store_artifacts:
          path: /tmp/artifacts
      - run:
          name: Delete Testing Scratch Org
          command: sf org delete scratch -o $TEST_ORG_ALIAS -p
      - when:
            condition:
              and:
                - equal: [ true, << pipeline.parameters.create-packages >> ]
                - $CIRCLE_PULL_REQUEST
            steps:
              - run:
                  name: Make Request to Packaging App
                  command: |
                    npm install axios
                    npm run --silent postToPackagingApp

workflows:
  build:
    jobs:
      - build

# VS Code Extension Version: 1.5.1